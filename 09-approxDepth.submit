#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

submitJob()
{
	local JOB_NAME LONGEST_N_SEQS ASM_FAI ALN_BAM OUTPUT_DEPTHS_TSV AVE_DEPTHS_TXT
	JOB_NAME="${1}"
	LONGEST_N_SEQS="${2}"
	ASM_FAI="${3}"
	ALN_BAM="${4}"
	OUTPUT_DEPTHS_TSV="${5}"
	AVE_DEPTH_TXT="${6}"

	NTASKS=${LONGEST_N_SEQS}
	if [ ${NTASKS} -gt 16 ]
	then
		NTASKS=16
	fi

	sbatch \
		-J ${JOB_NAME} \
		--signal=B:USR1@120 \
		--time=0-00:15:00 \
		--ntasks=${NTASKS} \
		--nodes=1 \
		--mem-per-cpu=1G \
		-o job_files/%x__%j.out \
		-e job_files/%x__%j.err \
		${SCRIPTS_DIR}/09-approxDepth.slurm \
		"${LONGEST_N_SEQS}" \
		"${ASM_FAI}" \
		"${ALN_BAM}" \
		"${OUTPUT_DEPTHS_TSV}" \
		"${AVE_DEPTH_TXT}"

}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

# check for species file
if [ ! -e "data/species.txt" ]
then
	printf "%s\n" "ERROR: The file \"data/species.txt\" does not exist, but it is required to allow this script to run correctly. Please refer to INSTRUCTIONS.md for details." 1>&2
	exit 1
fi

# define key variables
SPECIES=`head -n 1 "data/species.txt" | tr -d '\n'`
PROJECT="${SPECIES}-msmc"
NUM_LONG_SEQS=3
SAMPLE_FILE="data/samples.list"
ASSEMBLY_FAI="data/assembly/asm_long.fa.fai"

# check for the presence of input files that are not sample-specific
if [ ! -e "${ASSEMBLY_FAI}" ]
then
	printf "%s\n\t%s\n" "ERROR: Required input file does not exist: ${ASSEMBLY_FAI}" "None of the samples can be run without this file." 1>&2
	exit 1
fi

if [ ! -e "${SAMPLE_FILE}" ]
then
	printf "%s\n\t%s\n" "ERROR: Required input file does not exist: ${SAMPLE_FILE}" "None of the samples can be run without this file." 1>&2
	exit 1
fi

# process each sample
while read SAMPLE
do
	SKIP=0

	# set some handy variables
	ALIGNMENT_BAM="data/alns/${SAMPLE}_pacbio-reads_x_asm-long.bam"
	ALIGNMENT_BAI="${ALIGNMENT_BAM}.bai"
	OUT_DEPTHS_TSV="data/alns/${SAMPLE}_depths.tsv"
	AVE_DEPTHS="data/alns/${SAMPLE}_approx-depth.txt"

	declare -a INPUT_FILES=("${ALIGNMENT_BAM}" "${ALIGNMENT_BAI}")
	declare -a OUTPUT_FILES=("${OUT_DEPTHS_TSV}" "${AVE_DEPTHS}")

	# check for existence of needed input files
	for INPUT_FILE in "${INPUT_FILES[@]}"
	do
		if [ ! -e "${INPUT_FILE}" ]
		then
			printf "%s\n" "ERROR: Required input file does not exist for ${SAMPLE}: ${INPUT_FILE}" 1>&2
			SKIP=1
		fi
	done
	unset INPUT_FILES

	# check for existence of needed output files
	declare -a ALREADY_EXIST_OUTPUT_FILES
	for OUTPUT_FILE in "${OUTPUT_FILES[@]}"
	do
		if [ -e "${OUTPUT_FILE}" ]
		then
			ALREADY_EXIST_OUTPUT_FILES+=("${OUTPUT_FILE}")
		fi
	done

	if [ "${#ALREADY_EXIST_OUTPUT_FILES[@]}" -gt 0 ]
	then
		printf "%s\n" "WARNING: One or more output files already exists for ${SAMPLE}. To run this step, first delete them:" 1>&2
		printf "\trm -f \"%s\"\n" "${ALREADY_EXIST_OUTPUT_FILES[@]}" 1>&2
		SKIP=1
	fi
	unset ALREADY_EXIST_OUTPUT_FILES OUTPUT_FILES

	# exit without submitting the job, if needed
	if [ $SKIP -eq 0 ]
	then
		# ####################### #
		# actually submit the job #
		# ####################### #
		HPC_JOB_NAME="${PROJECT}_approxDepth_${SAMPLE}"
		submitJob \
			"${HPC_JOB_NAME}" \
			"${NUM_LONG_SEQS}" \
			"${ASSEMBLY_FAI}" \
			"${ALIGNMENT_BAM}" \
			"${OUT_DEPTHS_TSV}" \
			"${AVE_DEPTHS}"
	fi
	unset SKIP ALIGNMENT_BAM ALIGNMENT_BAI OUT_DEPTHS_TSV AVE_DEPTHS

done < "${SAMPLE_FILE}" # end of: while read SAMPLE

