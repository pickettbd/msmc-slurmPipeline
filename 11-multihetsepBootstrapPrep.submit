#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

getRandomSeed()
{
	local SEED_FILE RANDOM_SEED NUM_RE
	SEED_FILE="${1}"

	if [ -e "${SEED_FILE}" ]
	then
		RANDOM_SEED=$(cat "${SEED_FILE}" | tr -d '\n')

		NUM_RE='^[0-9]+$'
		if [[ "${RANDOM_SEED}" =~ $NUM_RE ]]
		then
			UINT2_MAX=65535
			if [ $RANDOM_SEED -gt $UINT2_MAX ]
			then
				printf "%s\n" "ERROR: The random seed (${RANDOM_SEED}) is too big. It should be a 2-byte unsigned integer."  1>&2
				exit 1
			fi
			unset UINT2_MAX
		else
			printf "%s\n" "ERROR: The random seed (${RANDOM_SEED}) is malformatted. It should be a 2-byte unsigned integer."  1>&2
			exit 1
		fi
		unset NUM_RE
	else
		printf "%s\n" "ERROR: The random seed file did not exist. Did you forget to run the previous step?"  1>&2
		exit 1
	fi

	printf "%u" "${RANDOM_SEED}"
}

submitJob()
{
	local JOB_NAME RANDOM_SEED BOOTSTRAP_REPS NUM_SEQS OUT_MSMC_PFX INPUT_MULTIHETSEPS
	JOB_NAME="${1}"
	RANDOM_SEED="${2}"
	BOOTSTRAP_REPS="${3}"
	NUM_SEQS="${4}"
	OUT_DIR_PFX="${5}"
	shift 5
	INPUT_MULTIHETSEPS=("${@}")

	sbatch \
		-J ${JOB_NAME} \
		--signal=B:USR1@60 \
		--time=0-01:00:00 \
		--ntasks=1 \
		--nodes=1 \
		--mem=1G \
		-o job_files/%x__%j.out \
		-e job_files/%x__%j.err \
		${SCRIPTS_DIR}/11-multihetsepBootstrapPrep.slurm \
		"${RANDOM_SEED}" \
		"${BOOTSTRAP_REPS}" \
		"${NUM_SEQS}" \
		"${OUT_DIR_PFX}" \
		"${INPUT_MULTIHETSEPS[@]}"
}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

# define key variables
SPECIES="bft"
PROJECT="${SPECIES}-msmc"
BOOTSTRAP_REPS=20
NUM_SEQS=30 # the number of "chromosomes" output per rep
SEED_FILE="data/random_seed-bootstrap.txt"
RANDOM_SEED=`getRandomSeed "${SEED_FILE}"`
ASSEMBLY_FAI="data/assembly/asm_long.fa.fai" # only necessary for presence of input data
ASSEMBLY_SEQIDS="${ASSEMBLY_FAI}" # only necessary for presence of input data
INPUT_DIR="data/multihetseps"
INPUT_SFX=".multihetsep.txt"
OUTPUT_DIR="data/multihetseps/bootstrap"
OUTPUT_PFX="${OUTPUT_DIR}/round"
OUTPUT_MFX="bootstrap_multihetsep.chr" # this cannot be changed, it is hardcoded into msmc-tools. MFX is made up: midfix (think prefix and suffix). The output files will be ${PFX}${i}/${MFX}${j}${SFX}, where i is 1..${BOOTSTRAP_REPS} and j is 1..${NUM_SEQS}
OUTPUT_SFX=".txt" # this cannot be changed, it is hardcoded into msmc-tools

# check for existence of needed input files
#declare -a INPUT_FILES=($(find "${INPUT_DIR}" -mindepth 2 -type f -name '*'"${INPUT_SFX}" -printf '%f ')) # <-- get input files from `find' command (assumes all needed files exist)
declare -a INPUT_FILES=( $(cut -d '	' -f 1 "${ASSEMBLY_SEQIDS}" | sed -r 's,^(.+)$,'"${INPUT_DIR}"'/\1'"${INPUT_SFX}"',' | tr '\n' ' ') ) # <-- get input files from list of sequence IDs (enables checking of input files existence)
declare -a OUTPUT_FILES=( `eval echo "${OUTPUT_PFX}"{1..${BOOTSTRAP_REPS}}/"${OUTPUT_MFX}"{1..${NUM_SEQS}}"${OUTPUT_SFX}"` )
OUTPUT_DIR=$(readlink -n -m `dirname "${OUTPUT_PFX}"`)

EXIT_EARLY=0

for INPUT_FILE in "${INPUT_FILES[@]}"
do
	if [ ! -e "${INPUT_FILE}" ]
	then
		printf "%s\n" "ERROR: Required input file does not exist: ${INPUT_FILE}" 1>&2
		EXIT_EARLY=1
	fi
done

# check for the existence of output files
declare -a ALREADY_EXIST_OUTPUT_FILES
for OUTPUT_FILE in "${OUTPUT_FILES[@]}"
do
	if [ -e "${OUTPUT_FILE}" ]
	then
		ALREADY_EXIST_OUTPUT_FILES+=("${OUTPUT_FILE}")
	fi
done

if [ ${#ALREADY_EXIST_OUTPUT_FILES[@]} -gt 0 ]
then
	printf "%s\n\trm -f" "ERROR: Output file(s) already exist(s). To run this step, first remove it/them:" 1>&2
	printf " %s" "${ALREADY_EXIST_OUTPUT_FILES[@]}" 1>&2
	printf "\n" 1>&2
	EXIT_EARLY=1
fi

# exit without submitting the job, if needed
if [ $EXIT_EARLY -ne 0 ]
then
	exit ${EXIT_EARLY}
fi
unset EXIT_EARLY

# create output dir (if needed)
mkdir -p "${OUTPUT_DIR}" &> /dev/null

# ####################### #
# actually submit the job #
# ####################### #
HPC_JOB_NAME="${PROJECT}_bootstrapPrep"
submitJob \
	"${HPC_JOB_NAME}" \
	"${RANDOM_SEED}" \
	"${BOOTSTRAP_REPS}" \
	"${NUM_SEQS}" \
	"${OUTPUT_PFX}" \
	"${INPUT_FILES[@]}"

